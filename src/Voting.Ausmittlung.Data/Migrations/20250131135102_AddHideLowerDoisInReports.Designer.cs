// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Ausmittlung.Data;

#nullable disable

namespace Voting.Ausmittlung.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250131135102_AddHideLowerDoisInReports")]
    partial class AddHideLowerDoisInReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Authority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId")
                        .IsUnique();

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Ballot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BallotType")
                        .HasColumnType("integer");

                    b.Property<bool>("HasTieBreakQuestions")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "Position")
                        .IsUnique();

                    b.ToTable("Ballots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoteEndResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotId")
                        .IsUnique();

                    b.HasIndex("VoteEndResultId");

                    b.HasIndex("BallotId", "VoteEndResultId")
                        .IsUnique();

                    b.ToTable("BallotEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FederalIdentification")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BallotId");

                    b.HasIndex("Number", "BallotId")
                        .IsUnique();

                    b.ToTable("BallotQuestions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BallotEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfCountingCircleNo")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfCountingCircleYes")
                        .HasColumnType("integer");

                    b.Property<bool>("HasCountingCircleMajority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCountingCircleUnanimity")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("BallotEndResultId", "QuestionId")
                        .IsUnique();

                    b.ToTable("BallotQuestionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotResultId");

                    b.HasIndex("QuestionId");

                    b.ToTable("BallotQuestionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotQuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BallotQuestionId", "Language")
                        .IsUnique();

                    b.ToTable("BallotQuestionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalCountOfDetailedEnteredBallots")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfBundlesNotReviewedOrDeleted")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteResultId");

                    b.HasIndex("BallotId", "VoteResultId")
                        .IsUnique();

                    b.ToTable("BallotResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BallotId", "Language")
                        .IsUnique();

                    b.ToTable("BallotTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CantonSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<bool>("CountingMachineEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("EndResultFinalizeDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("MajorityElectionAbsoluteMajorityAlgorithm")
                        .HasColumnType("integer");

                    b.Property<bool>("MajorityElectionInvalidVotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("MajorityElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManualPublishResultsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProportionalElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<int>("ProtocolCountingCircleSortType")
                        .HasColumnType("integer");

                    b.Property<int>("ProtocolDomainOfInfluenceSortType")
                        .HasColumnType("integer");

                    b.Property<bool>("PublishResultsBeforeAuditedTentatively")
                        .HasColumnType("boolean");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StatePlausibilisedDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SwissAbroadVotingRight")
                        .HasColumnType("integer");

                    b.Property<int[]>("SwissAbroadVotingRightDomainOfInfluenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("Canton")
                        .IsUnique();

                    b.ToTable("CantonSettings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CantonSettingsVotingCardChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CantonSettingsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.Property<int>("VotingChannel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CantonSettingsId", "Valid", "VotingChannel")
                        .IsUnique();

                    b.ToTable("CantonSettingsVotingCardChannels");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonCountOfVotersConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "Category")
                        .IsUnique();

                    b.ToTable("ComparisonCountOfVotersConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonVoterParticipationConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComparisonLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MainLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "MainLevel", "ComparisonLevel")
                        .IsUnique();

                    b.ToTable("ComparisonVoterParticipationConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonVotingChannelConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.Property<int>("VotingChannel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "VotingChannel")
                        .IsUnique();

                    b.ToTable("ComparisonVotingChannelConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EVotingFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EVotingResultsImported")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EVotingTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndOfTestingPhase")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PreviousContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("PreviousContestId");

                    b.HasIndex("State");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCantonDefaults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CountingMachineEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("EndResultFinalizeDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("MajorityElectionAbsoluteMajorityAlgorithm")
                        .HasColumnType("integer");

                    b.Property<bool>("MajorityElectionInvalidVotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("MajorityElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManualPublishResultsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProportionalElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<int>("ProtocolCountingCircleSortType")
                        .HasColumnType("integer");

                    b.Property<int>("ProtocolDomainOfInfluenceSortType")
                        .HasColumnType("integer");

                    b.Property<bool>("PublishResultsBeforeAuditedTentatively")
                        .HasColumnType("boolean");

                    b.Property<bool>("StatePlausibilisedDisabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("ContestCantonDefaults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestDetailsId", "Sex", "VoterType")
                        .IsUnique();

                    b.ToTable("ContestCountOfVotersInformationSubTotals");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountingCircleDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountingMachine")
                        .HasColumnType("integer");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("ContestId", "CountingCircleId")
                        .IsUnique();

                    b.ToTable("ContestCountingCircleDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountingCircleElectorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("DomainOfInfluenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("CountingCircleId");

                    b.ToTable("ContestCountingCircleElectorates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique();

                    b.ToTable("ContestDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("ContestDomainOfInfluenceDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId", "Language")
                        .IsUnique();

                    b.ToTable("ContestTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestVotingCardResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestDetailsId", "Channel", "Valid", "DomainOfInfluenceType")
                        .IsUnique();

                    b.ToTable("ContestVotingCardResultDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestCountingCircleDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestCountingCircleDetailsId", "Sex", "VoterType")
                        .IsUnique();

                    b.ToTable("CountOfVotersInformationSubTotals");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisCountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContactPersonSameDuringEventAsAfter")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ContestCountingCircleContactPersonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<bool>("MustUpdateContactPersons")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SnapshotContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotContestId");

                    b.ToTable("CountingCircles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleAfterEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleDuringEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleAfterEventId")
                        .IsUnique();

                    b.HasIndex("CountingCircleDuringEventId")
                        .IsUnique();

                    b.ToTable("CountingCircleContactPersons");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleElectorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("DomainOfInfluenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.ToTable("CountingCircleElectorates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleResultComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CreatedByMonitoringAuthority")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("CountingCircleResultComments");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleResultStateDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CantonSettingsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CantonSettingsId", "State")
                        .IsUnique();

                    b.ToTable("CountingCircleResultStateDescriptions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BasisDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasForeignerVoters")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMinorVoters")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideLowerDomainOfInfluencesInReports")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("PublishResultsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SnapshotContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SuperiorAuthorityDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("SwissAbroadVotingRight")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("ViewCountingCirclePartialResults")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SnapshotContestId");

                    b.HasIndex("SuperiorAuthorityDomainOfInfluenceId");

                    b.HasIndex("ViewCountingCirclePartialResults");

                    b.ToTable("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceCountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestDomainOfInfluenceDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestDomainOfInfluenceDetailsId", "Sex", "VoterType")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceCountOfVotersInformationSubTotals");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComparisonCountOfVotersCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("CountingCircleId", "DomainOfInfluenceId", "SourceDomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceCountingCircles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseDomainOfInfluencePartyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SnapshotContestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("SnapshotContestId");

                    b.HasIndex("BaseDomainOfInfluencePartyId", "SnapshotContestId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceParties");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluencePartyTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluencePartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluencePartyId", "Language")
                        .IsUnique();

                    b.ToTable("DomainOfInfluencePartyTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluencePermissionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("BasisCountingCircleIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("BasisDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("CountingCircleIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParent")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("TenantId", "BasisDomainOfInfluenceId", "ContestId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluencePermissions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceVotingCardResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestDomainOfInfluenceDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestDomainOfInfluenceDetailsId", "Channel", "Valid", "DomainOfInfluenceType")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceVotingCardResultDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CantonalQuorum")
                        .HasColumnType("integer");

                    b.Property<decimal>("ElectionKey")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasSubApportionmentRequiredLotDecision")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSuperApportionmentRequiredLotDecision")
                        .HasColumnType("boolean");

                    b.Property<int>("MandateAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubApportionmentNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<int>("SubApportionmentState")
                        .HasColumnType("integer");

                    b.Property<int>("SuperApportionmentNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<int>("SuperApportionmentNumberOfMandatesForLotDecision")
                        .HasColumnType("integer");

                    b.Property<int>("SuperApportionmentState")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("VoterNumber")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId")
                        .IsUnique();

                    b.HasIndex("ProportionalElectionUnionId")
                        .IsUnique();

                    b.ToTable("DoubleProportionalResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultCell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ProportionalElectionQuorumReached")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SubApportionmentLotDecisionRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("SubApportionmentNumberOfMandatesExclLotDecision")
                        .HasColumnType("integer");

                    b.Property<int>("SubApportionmentNumberOfMandatesFromLotDecision")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("VoterNumber")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ListId");

                    b.HasIndex("RowId");

                    b.ToTable("DoubleProportionalResultCells");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AnyRequiredQuorumReached")
                        .HasColumnType("boolean");

                    b.Property<bool>("CantonalQuorumReached")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Divisor")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubApportionmentInitialNegativeTies")
                        .HasColumnType("integer");

                    b.Property<int>("SubApportionmentNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<bool>("SuperApportionmentLotDecisionRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("SuperApportionmentNumberOfMandatesExclLotDecision")
                        .HasColumnType("integer");

                    b.Property<int>("SuperApportionmentNumberOfMandatesFromLotDecision")
                        .HasColumnType("integer");

                    b.Property<decimal>("SuperApportionmentQuotient")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UnionListId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("VoterNumber")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ListId")
                        .IsUnique();

                    b.HasIndex("ResultId");

                    b.HasIndex("UnionListId")
                        .IsUnique();

                    b.ToTable("DoubleProportionalResultColumns");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Divisor")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quorum")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubApportionmentNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("VoterNumber")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId");

                    b.HasIndex("ResultId");

                    b.ToTable("DoubleProportionalResultRows");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ElectionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfSecondaryElections")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryMajorityElectionId")
                        .IsUnique();

                    b.ToTable("ElectionGroups");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.EventProcessingState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CommitPosition")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("EventNumber")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("PreparePosition")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("EventProcessingStates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ExportConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("EaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("ExportKeys")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("ExportConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("WinnerReason")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("WinnerId");

                    b.HasIndex("Index", "GroupId")
                        .IsUnique();

                    b.ToTable("HagenbachBischoffCalculationRound");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRoundGroupValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalculationRoundId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<decimal>("NextQuotient")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<decimal>("PreviousQuotient")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CalculationRoundId");

                    b.HasIndex("GroupId", "CalculationRoundId")
                        .IsUnique();

                    b.ToTable("HagenbachBischoffCalculationRoundGroupValues");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllListNumbers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("InitialNumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListUnionId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndResultId")
                        .IsUnique();

                    b.HasIndex("ListId")
                        .IsUnique();

                    b.HasIndex("ListUnionId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("HagenbachBischoffGroup");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.IgnoredImportCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountingCircleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountingCircleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTestCountingCircle")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResultImportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultImportId");

                    b.ToTable("IgnoredImportCountingCircles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticEmptyVoteCounting")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotBundleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotNumberGeneration")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceCandidateCheckDigitForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceEmptyVoteCountingForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceResultEntryForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<int?>("FederalIdentification")
                        .HasColumnType("integer");

                    b.Property<bool>("IndividualCandidatesDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("MandateAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReportDomainOfInfluenceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ResultEntry")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("PrimaryMajorityElectionId");

                    b.ToTable("MajorityElections");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllCandidateCountsOk")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionId");

                    b.ToTable("MajorityElectionBallotGroups");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("BlankRowCount")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualCandidatesVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotGroupId");

                    b.HasIndex("PrimaryMajorityElectionId");

                    b.HasIndex("SecondaryMajorityElectionId");

                    b.ToTable("MajorityElectionBallotGroupEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntryCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotGroupEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PrimaryElectionCandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryElectionCandidateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotGroupEntryId");

                    b.HasIndex("PrimaryElectionCandidateId");

                    b.HasIndex("SecondaryElectionCandidateId");

                    b.ToTable("MajorityElectionBallotGroupEntryCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ElectionResultId");

                    b.HasIndex("BallotGroupId", "ElectionResultId")
                        .IsUnique();

                    b.ToTable("MajorityElectionBallotGroupResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateReferenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<bool>("CreatedDuringActiveContest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateReferenceId");

                    b.HasIndex("MajorityElectionId");

                    b.ToTable("MajorityElectionCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingVoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("LotDecision")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MajorityElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("MajorityElectionEndResultId");

                    b.HasIndex("CandidateId", "MajorityElectionEndResultId")
                        .IsUnique();

                    b.ToTable("MajorityElectionCandidateEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingExclWriteInsVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingWriteInsVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ElectionResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionResultId", "CandidateId")
                        .IsUnique();

                    b.ToTable("MajorityElectionCandidateResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionCandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionCandidateId", "Language")
                        .IsUnique();

                    b.ToTable("MajorityElectionCandidateTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfDoneCountingCircles")
                        .HasColumnType("integer");

                    b.Property<bool>("Finalized")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCountOfCountingCircles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionId")
                        .IsUnique();

                    b.ToTable("MajorityElectionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<Guid>("MajorityElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionEndResultId");

                    b.ToTable("MajorityElectionEndResultCountOfVotersInformationSubTotal");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultVotingCardDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<int?>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MajorityElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionEndResultId");

                    b.ToTable("MajorityElectionEndResultVotingCardDetail");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuditedTentativelyTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ConventionalCountOfBallotGroupVotes")
                        .HasColumnType("integer");

                    b.Property<int>("ConventionalCountOfDetailedEnteredBallots")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfBundlesNotReviewedOrDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfElectionsWithUnmappedWriteIns")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Entry")
                        .HasColumnType("integer");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlausibilisedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadyForCorrectionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmissionDoneTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalSentEVotingVotingCards")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("MajorityElectionId", "CountingCircleId")
                        .IsUnique();

                    b.ToTable("MajorityElectionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<int>("CandidateVoteCountExclIndividual")
                        .HasColumnType("integer");

                    b.Property<int>("EmptyVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("InvalidVoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MarkedForReview")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.ToTable("MajorityElectionResultBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallotCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("BallotId", "CandidateId")
                        .IsUnique();

                    b.ToTable("MajorityElectionResultBallotCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfBallots")
                        .HasColumnType("integer");

                    b.Property<Guid>("ElectionResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ElectionResultId");

                    b.ToTable("MajorityElectionResultBundles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionId", "Language")
                        .IsUnique();

                    b.ToTable("MajorityElectionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("MajorityElectionUnions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionUnionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MajorityElectionUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionUnionId");

                    b.HasIndex("MajorityElectionId", "MajorityElectionUnionId")
                        .IsUnique();

                    b.ToTable("MajorityElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("CandidateIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<int>("EmptyVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("InvalidVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("MajorityElectionWriteInBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallotPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<Guid>("WriteInMappingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotId");

                    b.HasIndex("WriteInMappingId");

                    b.ToTable("MajorityElectionWriteInBallotPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<string>("WriteInCandidateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateResultId");

                    b.HasIndex("ResultId");

                    b.ToTable("MajorityElectionWriteInMappings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ComparisonValidVotingCardsWithAccountedBallotsThresholdPercent")
                        .HasColumnType("numeric");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("PlausibilisationConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticEmptyVoteCounting")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotBundleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotNumberGeneration")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceCandidateCheckDigitForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceEmptyVoteCountingForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<int?>("FederalIdentification")
                        .HasColumnType("integer");

                    b.Property<int>("MandateAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("ProportionalElections");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accumulated")
                        .HasColumnType("boolean");

                    b.Property<int>("AccumulatedPosition")
                        .HasColumnType("integer");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProportionalElectionListId");

                    b.ToTable("ProportionalElectionCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListEndResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LotDecision")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("ListEndResultId");

                    b.HasIndex("CandidateId", "ListEndResultId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionCandidateEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListResultId");

                    b.HasIndex("CandidateId", "ListResultId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionCandidateResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionCandidateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionCandidateId", "Language")
                        .IsUnique();

                    b.ToTable("ProportionalElectionCandidateTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateVoteSourceEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("CandidateResultId", "ListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionCandidateVoteSourceEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateVoteSourceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("CandidateResultId", "ListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionCandidateVoteSourceResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfDoneCountingCircles")
                        .HasColumnType("integer");

                    b.Property<bool>("Finalized")
                        .HasColumnType("boolean");

                    b.Property<bool>("MandateDistributionTriggered")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManualEndResultRequired")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCountOfCountingCircles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionEndResultId");

                    b.ToTable("ProportionalElectionEndResultCountOfVotersInformationSubTotal");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionEndResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionEndResultId");

                    b.ToTable("ProportionalElectionEndResultListLotDecision");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecisionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListUnionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionEndResultListLotDecisionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Winning")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("ListUnionId");

                    b.HasIndex("ProportionalElectionEndResultListLotDecisionId");

                    b.ToTable("ProportionalElectionEndResultListLotDecisionEntry");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultVotingCardDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<int?>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionEndResultId");

                    b.ToTable("ProportionalElectionEndResultVotingCardDetail");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BlankRowCount")
                        .HasColumnType("integer");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId");

                    b.ToTable("ProportionalElectionLists");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasOpenRequiredLotDecisions")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ElectionEndResultId");

                    b.HasIndex("ListId")
                        .IsUnique();

                    b.HasIndex("ListId", "ElectionEndResultId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionListEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("ResultId", "ListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionListResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionListId", "Language")
                        .IsUnique();

                    b.ToTable("ProportionalElectionListTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProportionalElectionMainListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProportionalElectionRootListUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId");

                    b.HasIndex("ProportionalElectionMainListId");

                    b.HasIndex("ProportionalElectionRootListUnionId");

                    b.ToTable("ProportionalElectionListUnions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnionEntry", b =>
                {
                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionListUnionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("ProportionalElectionListId", "ProportionalElectionListUnionId");

                    b.HasIndex("ProportionalElectionListUnionId");

                    b.ToTable("ProportionalElectionListUnionEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionListUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionListUnionId", "Language")
                        .IsUnique();

                    b.ToTable("ProportionalElectionListUnionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuditedTentativelyTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CountOfBundlesNotReviewedOrDeleted")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlausibilisedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadyForCorrectionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmissionDoneTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalSentEVotingVotingCards")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("ProportionalElectionId", "CountingCircleId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<int>("EmptyVoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MarkedForReview")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.ToTable("ProportionalElectionResultBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallotCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("OnList")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<bool>("RemovedFromList")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BallotId");

                    b.HasIndex("CandidateId");

                    b.ToTable("ProportionalElectionResultBallotCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfBallots")
                        .HasColumnType("integer");

                    b.Property<Guid>("ElectionResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ElectionResultId");

                    b.HasIndex("ListId");

                    b.ToTable("ProportionalElectionBundles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId", "Language")
                        .IsUnique();

                    b.ToTable("ProportionalElectionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ProportionalElectionUnions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfDoneElections")
                        .HasColumnType("integer");

                    b.Property<bool>("Finalized")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCountOfElections")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionId");

                    b.HasIndex("ProportionalElectionId", "ProportionalElectionUnionId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionId");

                    b.ToTable("ProportionalElectionUnionLists");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionUnionListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionListId");

                    b.HasIndex("ProportionalElectionListId", "ProportionalElectionUnionListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionListEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionListTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionUnionListId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionListId", "Language")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionListTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnmodifiedListResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("ResultId", "ListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnmodifiedListResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProtocolExport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExportTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrintJobId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("CountingCircleId");

                    b.ToTable("ProtocolExports");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("EaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExportConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("ExportKeys")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("IntervalMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LatestExecution")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextExecution")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("ResultExportConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfigurationPoliticalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultExportConfigurationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultExportConfigurationId");

                    b.HasIndex("PoliticalBusinessId", "ResultExportConfigurationId")
                        .IsUnique();

                    b.ToTable("ResultExportConfigurationPoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfigurationPoliticalBusinessMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultExportConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResultExportConfigurationId");

                    b.HasIndex("PoliticalBusinessId", "ResultExportConfigurationId")
                        .IsUnique();

                    b.ToTable("ResultExportConfigurationPoliticalBusinessMetadata");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ResultImports");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultImportCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultImportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("ResultImportId");

                    b.ToTable("ResultImportCountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ElectionGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IndividualCandidatesDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ElectionGroupId");

                    b.HasIndex("PrimaryMajorityElectionId");

                    b.ToTable("SecondaryMajorityElections");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateReferenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<bool>("CreatedDuringActiveContest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateReferenceId");

                    b.HasIndex("SecondaryMajorityElectionId");

                    b.ToTable("SecondaryMajorityElectionCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingVoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("LotDecision")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("LotDecisionRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecondaryMajorityElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("SecondaryMajorityElectionEndResultId");

                    b.HasIndex("CandidateId", "SecondaryMajorityElectionEndResultId")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionCandidateEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ConventionalVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingExclWriteInsVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("EVotingWriteInsVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ElectionResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionResultId", "CandidateId")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionCandidateResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecondaryMajorityElectionCandidateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryMajorityElectionCandidateId", "Language")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionCandidateTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryMajorityElectionEndResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryMajorityElectionEndResultId");

                    b.HasIndex("SecondaryMajorityElectionId")
                        .IsUnique();

                    b.HasIndex("SecondaryMajorityElectionId", "PrimaryMajorityElectionEndResultId")
                        .IsUnique()
                        .HasDatabaseName("IX_SecondaryMajorityElectionEndResults_SecondaryMajorityElect~1");

                    b.ToTable("SecondaryMajorityElectionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryResultId");

                    b.HasIndex("SecondaryMajorityElectionId");

                    b.ToTable("SecondaryMajorityElectionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CandidateVoteCountExclIndividual")
                        .HasColumnType("integer");

                    b.Property<int>("EmptyVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("InvalidVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrimaryBallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondaryMajorityElectionResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryMajorityElectionResultId");

                    b.HasIndex("PrimaryBallotId", "SecondaryMajorityElectionResultId")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionResultBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallotCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("BallotId", "CandidateId")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionResultBallotCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryMajorityElectionId", "Language")
                        .IsUnique();

                    b.ToTable("SecondaryMajorityElectionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("CandidateIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<int>("EmptyVoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("InvalidVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("SecondaryMajorityElectionWriteInBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallotPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<Guid>("WriteInMappingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotId");

                    b.HasIndex("WriteInMappingId");

                    b.ToTable("SecondaryMajorityElectionWriteInBallotPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<string>("WriteInCandidateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateResultId");

                    b.HasIndex("ResultId");

                    b.ToTable("SecondaryMajorityElectionWriteInMappings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimpleCountingCircleResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuditedTentativelyTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CountOfElectionsWithUnmappedWriteIns")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasComments")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PlausibilisedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadyForCorrectionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmissionDoneTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("PoliticalBusinessId");

                    b.ToTable("SimpleCountingCircleResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfSecondaryBusinesses")
                        .HasColumnType("integer");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EndResultFinalized")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PoliticalBusinessSubType")
                        .HasColumnType("integer");

                    b.Property<int>("PoliticalBusinessType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("SimplePoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimplePoliticalBusinessTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SimplePoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SimplePoliticalBusinessId", "Language")
                        .IsUnique();

                    b.ToTable("SimplePoliticalBusinessTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FederalIdentification")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Question1Number")
                        .HasColumnType("integer");

                    b.Property<int>("Question2Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BallotId", "Question1Number", "Question2Number")
                        .IsUnique();

                    b.ToTable("TieBreakQuestions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfCountingCircleQ1")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfCountingCircleQ2")
                        .HasColumnType("integer");

                    b.Property<bool>("HasCountingCircleQ1Majority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCountingCircleQ2Majority")
                        .HasColumnType("boolean");

                    b.Property<bool>("Q1Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotEndResultId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("TieBreakQuestionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotResultId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TieBreakQuestionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TieBreakQuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TieBreakQuestionId", "Language")
                        .IsUnique();

                    b.ToTable("TieBreakQuestionTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSizePercent")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceResultEntryForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<string>("InternalDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReportDomainOfInfluenceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ResultAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("ResultEntry")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfDoneCountingCircles")
                        .HasColumnType("integer");

                    b.Property<bool>("Finalized")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalCountOfCountingCircles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteId")
                        .IsUnique();

                    b.ToTable("VoteEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteEndResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoterType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VoteEndResultId");

                    b.ToTable("VoteEndResultCountOfVotersInformationSubTotal");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResultVotingCardDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<int?>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VoteEndResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteEndResultId");

                    b.ToTable("VoteEndResultVotingCardDetail");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuditedTentativelyTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Entry")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PlausibilisedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadyForCorrectionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmissionDoneTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalCountOfVoters")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalSentEVotingVotingCards")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.HasIndex("VoteId", "CountingCircleId")
                        .IsUnique();

                    b.ToTable("VoteResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("MarkedForReview")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.ToTable("VoteResultBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallotQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("BallotId", "QuestionId")
                        .IsUnique();

                    b.ToTable("VoteResultBallotQuestionAnswers");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallotTieBreakQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("BallotId", "QuestionId")
                        .IsUnique();

                    b.ToTable("VoteResultBallotTieBreakQuestionAnswers");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotResultId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfBallots")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BallotResultId");

                    b.ToTable("VoteResultBundles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "Language")
                        .IsUnique();

                    b.ToTable("VoteTranslations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VotingCardResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestCountingCircleDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfReceivedVotingCards")
                        .HasColumnType("integer");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestCountingCircleDetailsId", "Channel", "Valid", "DomainOfInfluenceType")
                        .IsUnique();

                    b.ToTable("VotingCardResultDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Authority", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithOne("ResponsibleAuthority")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.Authority", "CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Ballot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Vote", "Vote")
                        .WithMany("Ballots")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Ballot", "Ballot")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.BallotEndResult", "BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteEndResult", "VoteEndResult")
                        .WithMany("BallotEndResults")
                        .HasForeignKey("VoteEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("BallotEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("BallotEndResultId");

                            b1.ToTable("BallotEndResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotEndResultId");
                        });

                    b.Navigation("Ballot");

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("VoteEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestion", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Ballot", "Ballot")
                        .WithMany("BallotQuestions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotEndResult", "BallotEndResult")
                        .WithMany("QuestionEndResults")
                        .HasForeignKey("BallotEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotQuestion", "Question")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.BallotQuestionEndResult", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.BallotQuestionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("BallotQuestionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerNo")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerYes")
                                .HasColumnType("integer");

                            b1.HasKey("BallotQuestionEndResultId");

                            b1.ToTable("BallotQuestionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotQuestionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.BallotQuestionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("BallotQuestionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerNo")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerYes")
                                .HasColumnType("integer");

                            b1.HasKey("BallotQuestionEndResultId");

                            b1.ToTable("BallotQuestionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotQuestionEndResultId");
                        });

                    b.Navigation("BallotEndResult");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotResult", "BallotResult")
                        .WithMany("QuestionResults")
                        .HasForeignKey("BallotResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotQuestion", "Question")
                        .WithMany("Results")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.BallotQuestionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("BallotQuestionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerNo")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerYes")
                                .HasColumnType("integer");

                            b1.HasKey("BallotQuestionResultId");

                            b1.ToTable("BallotQuestionResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotQuestionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.BallotQuestionResultNullableSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("BallotQuestionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("TotalCountOfAnswerNo")
                                .HasColumnType("integer");

                            b1.Property<int?>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.Property<int?>("TotalCountOfAnswerYes")
                                .HasColumnType("integer");

                            b1.HasKey("BallotQuestionResultId");

                            b1.ToTable("BallotQuestionResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotQuestionResultId");
                        });

                    b.Navigation("BallotResult");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotQuestion", "BallotQuestion")
                        .WithMany("Translations")
                        .HasForeignKey("BallotQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BallotQuestion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Ballot", "Ballot")
                        .WithMany("Results")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteResult", "VoteResult")
                        .WithMany("Results")
                        .HasForeignKey("VoteResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessNullableCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("BallotResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("BallotResultId");

                            b1.ToTable("BallotResults");

                            b1.WithOwner()
                                .HasForeignKey("BallotResultId");
                        });

                    b.Navigation("Ballot");

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("VoteResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Ballot", "Ballot")
                        .WithMany("Translations")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CantonSettingsVotingCardChannel", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CantonSettings", "CantonSettings")
                        .WithMany("EnabledVotingCardChannels")
                        .HasForeignKey("CantonSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CantonSettings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonCountOfVotersConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonCountOfVotersConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonVoterParticipationConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonVoterParticipationConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ComparisonVotingChannelConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonVotingChannelConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Contest", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Contests")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "PreviousContest")
                        .WithMany("PreviousContestOwners")
                        .HasForeignKey("PreviousContestId");

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("PreviousContest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCantonDefaults", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithOne("CantonDefaults")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ContestCantonDefaults", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Voting.Ausmittlung.Data.Models.ContestCantonDefaultsCountingCircleResultStateDescription", "CountingCircleResultStateDescriptions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("ContestCantonDefaultsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("State")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ContestCantonDefaultsId");

                            b1.ToTable("ContestCantonDefaultsCountingCircleResultStateDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("ContestCantonDefaultsId");
                        });

                    b.OwnsMany("Voting.Ausmittlung.Data.Models.DomainOfInfluenceCantonDefaultsVotingCardChannel", "EnabledVotingCardChannels", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("ContestCantonDefaultsId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Valid")
                                .HasColumnType("boolean");

                            b1.Property<int>("VotingChannel")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ContestCantonDefaultsId");

                            b1.ToTable("DomainOfInfluenceCantonDefaultsVotingCardChannels");

                            b1.WithOwner()
                                .HasForeignKey("ContestCantonDefaultsId");
                        });

                    b.Navigation("Contest");

                    b.Navigation("CountingCircleResultStateDescriptions");

                    b.Navigation("EnabledVotingCardChannels");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestDetails", "ContestDetails")
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("ContestDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountingCircleDetails", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("CountingCircleDetails")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("ContestDetails")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountingCircleElectorate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("ContestElectorates")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDetails", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithOne("Details")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ContestDetails", "ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("DomainOfInfluenceDetails")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithOne("Details")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("Translations")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestVotingCardResultDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestDetails", "ContestDetails")
                        .WithMany("VotingCards")
                        .HasForeignKey("ContestDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestCountingCircleDetails", "ContestCountingCircleDetails")
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("ContestCountingCircleDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestCountingCircleDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "SnapshotContest")
                        .WithMany()
                        .HasForeignKey("SnapshotContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SnapshotContest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleContactPerson", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircleAfterEvent")
                        .WithOne("ContactPersonAfterEvent")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.CountingCircleContactPerson", "CountingCircleAfterEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircleDuringEvent")
                        .WithOne("ContactPersonDuringEvent")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.CountingCircleContactPerson", "CountingCircleDuringEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CountingCircleContactPersons_CountingCircles_CountingCircl~1");

                    b.Navigation("CountingCircleAfterEvent");

                    b.Navigation("CountingCircleDuringEvent");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleElectorate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("Electorates")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleResultComment", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SimpleCountingCircleResult", "Result")
                        .WithMany("Comments")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("CountingCircleResultCommentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CountingCircleResultCommentId");

                            b1.ToTable("CountingCircleResultComments");

                            b1.WithOwner()
                                .HasForeignKey("CountingCircleResultCommentId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircleResultStateDescription", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CantonSettings", "CantonSettings")
                        .WithMany("CountingCircleResultStateDescriptions")
                        .HasForeignKey("CantonSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CantonSettings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "SnapshotContest")
                        .WithMany()
                        .HasForeignKey("SnapshotContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "SuperiorAuthorityDomainOfInfluence")
                        .WithMany("SubAuthorityDomainOfInfluences")
                        .HasForeignKey("SuperiorAuthorityDomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("SnapshotContest");

                    b.Navigation("SuperiorAuthorityDomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceCountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", "ContestDomainOfInfluenceDetails")
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("ContestDomainOfInfluenceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestDomainOfInfluenceDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("DomainOfInfluences")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("CountingCircles")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Parties")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "SnapshotContest")
                        .WithMany("DomainOfInfluenceParties")
                        .HasForeignKey("SnapshotContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("SnapshotContest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluencePartyTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluenceParty", "DomainOfInfluenceParty")
                        .WithMany("Translations")
                        .HasForeignKey("DomainOfInfluencePartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluenceParty");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluencePermissionEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceVotingCardResultDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", "ContestDomainOfInfluenceDetails")
                        .WithMany("VotingCards")
                        .HasForeignKey("ContestDomainOfInfluenceDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestDomainOfInfluenceDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithOne("DoubleProportionalResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", "ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithOne("DoubleProportionalResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", "ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProportionalElection");

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultCell", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", "Column")
                        .WithMany("Cells")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("DoubleProportionalResultCells")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DoubleProportionalResultRow", "Row")
                        .WithMany("Cells")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("List");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithOne("DoubleProportionalResultColumn")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", "ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", "Result")
                        .WithMany("Columns")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", "UnionList")
                        .WithOne("DoubleProportionalResultColumn")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", "UnionListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("List");

                    b.Navigation("Result");

                    b.Navigation("UnionList");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultRow", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("DoubleProportionalResultRows")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", "Result")
                        .WithMany("Rows")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ElectionGroup", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithOne("ElectionGroup")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ElectionGroup", "PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ExportConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ExportConfigurations")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRound", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "Group")
                        .WithMany("CalculationRounds")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "Winner")
                        .WithMany("CalculationWinnerRounds")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRoundGroupValues", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRound", "CalculationRound")
                        .WithMany("GroupValues")
                        .HasForeignKey("CalculationRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "Group")
                        .WithMany("CalculationRoundValues")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HagenbachBischoffCalculationRoundGroupValues_HagenbachBisc~1");

                    b.Navigation("CalculationRound");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", "EndResult")
                        .WithOne("HagenbachBischoffRootGroup")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "EndResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithOne("HagenbachBischoffGroup")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", "ListUnion")
                        .WithOne("HagenbachBischoffGroup")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "ListUnionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PropElectionHBGroup_Parent");

                    b.Navigation("EndResult");

                    b.Navigation("List");

                    b.Navigation("ListUnion");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.IgnoredImportCountingCircle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ResultImport", "ResultImport")
                        .WithMany("IgnoredCountingCircles")
                        .HasForeignKey("ResultImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultImport");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElection", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("MajorityElections")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("MajorityElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithMany("SecondaryMajorityElectionsOnSeparateBallots")
                        .HasForeignKey("PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("PrimaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("BallotGroups")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroup", "BallotGroup")
                        .WithMany("Entries")
                        .HasForeignKey("BallotGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BallotGroup");

                    b.Navigation("PrimaryMajorityElection");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntryCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntry", "BallotGroupEntry")
                        .WithMany("Candidates")
                        .HasForeignKey("BallotGroupEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "PrimaryElectionCandidate")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("PrimaryElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MajorityElectionBallotGroupEntryCandidates_MajorityElectio~1");

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", "SecondaryElectionCandidate")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("SecondaryElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BallotGroupEntry");

                    b.Navigation("PrimaryElectionCandidate");

                    b.Navigation("SecondaryElectionCandidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroup", "BallotGroup")
                        .WithMany("BallotGroupResults")
                        .HasForeignKey("BallotGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "ElectionResult")
                        .WithMany("BallotGroupResults")
                        .HasForeignKey("ElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BallotGroup");

                    b.Navigation("ElectionResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "CandidateReference")
                        .WithMany("CandidateReferencesOfSecondaryElectionsOnSeparateBallot")
                        .HasForeignKey("CandidateReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("MajorityElectionCandidates")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateReference");

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "Candidate")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateEndResult", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", "MajorityElectionEndResult")
                        .WithMany("CandidateEndResults")
                        .HasForeignKey("MajorityElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("MajorityElectionEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "Candidate")
                        .WithMany("CandidateResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "ElectionResult")
                        .WithMany("CandidateResults")
                        .HasForeignKey("ElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("ElectionResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "MajorityElectionCandidate")
                        .WithMany("Translations")
                        .HasForeignKey("MajorityElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElectionCandidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", "MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultCalculation", "Calculation", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("AbsoluteMajority")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("AbsoluteMajorityThreshold")
                                .HasColumnType("numeric");

                            b1.Property<int?>("DecisiveVoteCount")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionEndResultId");

                            b1.ToTable("MajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionEndResultId");

                            b1.ToTable("MajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("MajorityElectionEndResultId");

                            b1.ToTable("MajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionEndResultId");

                            b1.ToTable("MajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionEndResultId");
                        });

                    b.Navigation("Calculation")
                        .IsRequired();

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", null)
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("MajorityElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultVotingCardDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", null)
                        .WithMany("VotingCards")
                        .HasForeignKey("MajorityElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("MajorityElectionResults")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("Results")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultNullableSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int?>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int?>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int?>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionResultId");

                            b1.ToTable("MajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessNullableCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("MajorityElectionResultId");

                            b1.ToTable("MajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionResultId");

                            b1.ToTable("MajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultEntryParams", "EntryParams", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AutomaticBallotBundleNumberGeneration")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AutomaticEmptyVoteCounting")
                                .HasColumnType("boolean");

                            b1.Property<int>("BallotBundleSampleSize")
                                .HasColumnType("integer");

                            b1.Property<int>("BallotBundleSize")
                                .HasColumnType("integer");

                            b1.Property<int>("BallotNumberGeneration")
                                .HasColumnType("integer");

                            b1.Property<bool>("CandidateCheckDigit")
                                .HasColumnType("boolean");

                            b1.Property<int>("ReviewProcedure")
                                .HasColumnType("integer");

                            b1.HasKey("MajorityElectionResultId");

                            b1.ToTable("MajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("EntryParams");

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultBundle", "Bundle")
                        .WithMany("Ballots")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallotCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallot", "Ballot")
                        .WithMany("BallotCandidates")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "Candidate")
                        .WithMany("BallotCandidatures")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBundle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "ElectionResult")
                        .WithMany("Bundles")
                        .HasForeignKey("ElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MajorityElectionResultBundleId");

                            b1.ToTable("MajorityElectionResultBundles");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultBundleId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "ReviewedBy", b1 =>
                        {
                            b1.Property<Guid>("MajorityElectionResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MajorityElectionResultBundleId");

                            b1.ToTable("MajorityElectionResultBundles");

                            b1.WithOwner()
                                .HasForeignKey("MajorityElectionResultBundleId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ElectionResult");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("Translations")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionUnion", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("MajorityElectionUnions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionUnionEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("MajorityElectionUnionEntries")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionUnion", "MajorityElectionUnion")
                        .WithMany("MajorityElectionUnionEntries")
                        .HasForeignKey("MajorityElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");

                    b.Navigation("MajorityElectionUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "Result")
                        .WithMany("WriteInBallots")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallotPosition", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallot", "Ballot")
                        .WithMany("WriteInPositions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInMapping", "WriteInMapping")
                        .WithMany("BallotPositions")
                        .HasForeignKey("WriteInMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MajorityElectionWriteInBallotPositions_MajorityElectionWri~1");

                    b.Navigation("Ballot");

                    b.Navigation("WriteInMapping");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInMapping", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidateResult", "CandidateResult")
                        .WithMany()
                        .HasForeignKey("CandidateResultId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "Result")
                        .WithMany("WriteInMappings")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateResult");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithOne("PlausibilisationConfiguration")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElection", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("ProportionalElections")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ProportionalElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluenceParty", "Party")
                        .WithMany("ProportionalElectionCandidates")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionCandidates")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("ProportionalElectionList");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", "Candidate")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateEndResult", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionCandidateEndResults_CandidateId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListEndResult", "ListEndResult")
                        .WithMany("CandidateEndResults")
                        .HasForeignKey("ListEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionCandidateEndResults_ListEndResultId");

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionCandidateEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CountOfVotesFromAccumulations")
                                .HasColumnType("integer");

                            b1.Property<int>("CountOfVotesOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionCandidateEndResultId");

                            b1.ToTable("ProportionalElectionCandidateEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionCandidateEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionCandidateEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CountOfVotesFromAccumulations")
                                .HasColumnType("integer");

                            b1.Property<int>("CountOfVotesOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionCandidateEndResultId");

                            b1.ToTable("ProportionalElectionCandidateEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionCandidateEndResultId");
                        });

                    b.Navigation("Candidate");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("ListEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", "Candidate")
                        .WithMany("Results")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionCandidateResults_CandidateId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListResult", "ListResult")
                        .WithMany("CandidateResults")
                        .HasForeignKey("ListResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionCandidateResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CountOfVotesFromAccumulations")
                                .HasColumnType("integer");

                            b1.Property<int>("CountOfVotesOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionCandidateResultId");

                            b1.ToTable("ProportionalElectionCandidateResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionCandidateResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionCandidateResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CountOfVotesFromAccumulations")
                                .HasColumnType("integer");

                            b1.Property<int>("CountOfVotesOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionCandidateResultId");

                            b1.ToTable("ProportionalElectionCandidateResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionCandidateResultId");
                        });

                    b.Navigation("Candidate");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("ListResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", "ProportionalElectionCandidate")
                        .WithMany("Translations")
                        .HasForeignKey("ProportionalElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionCandidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateVoteSourceEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateEndResult", "CandidateResult")
                        .WithMany("VoteSources")
                        .HasForeignKey("CandidateResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("CandidateEndResultVoteSources")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProportionalElectionCandidateVoteSourceEndResult_Proportio~1");

                    b.Navigation("CandidateResult");

                    b.Navigation("List");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateVoteSourceResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResult", "CandidateResult")
                        .WithMany("VoteSources")
                        .HasForeignKey("CandidateResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("CandidateResultVoteSources")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProportionalElectionCandidateVoteSourceResult_Proportional~1");

                    b.Navigation("CandidateResult");

                    b.Navigation("List");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", "ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfBlankRowsOnListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfModifiedLists")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfUnmodifiedLists")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionEndResultId");

                            b1.ToTable("ProportionalElectionEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("ProportionalElectionEndResultId");

                            b1.ToTable("ProportionalElectionEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfBlankRowsOnListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfModifiedLists")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfUnmodifiedLists")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionEndResultId");

                            b1.ToTable("ProportionalElectionEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionEndResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("ProportionalElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", null)
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("ProportionalElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecision", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", "ProportionalElectionEndResult")
                        .WithMany("ListLotDecisions")
                        .HasForeignKey("ProportionalElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecisionEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("ListLotDecisionEntries")
                        .HasForeignKey("ListId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", "ListUnion")
                        .WithMany("ListLotDecisionEntries")
                        .HasForeignKey("ListUnionId")
                        .HasConstraintName("FK_ProportionalElectionEndResultListLotDecisionEntry_Proporti~1");

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecision", "ProportionalElectionEndResultListLotDecision")
                        .WithMany("Entries")
                        .HasForeignKey("ProportionalElectionEndResultListLotDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionEndResultListLotDecisionEntry_Proporti~2");

                    b.Navigation("List");

                    b.Navigation("ListUnion");

                    b.Navigation("ProportionalElectionEndResultListLotDecision");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultVotingCardDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", null)
                        .WithMany("VotingCards")
                        .HasForeignKey("ProportionalElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionList", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionLists")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", "ElectionEndResult")
                        .WithMany("ListEndResults")
                        .HasForeignKey("ElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ProportionalElectionListEndResult", "ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionListEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ListVotesCountOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListsCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionListEndResultId");

                            b1.ToTable("ProportionalElectionListEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionListEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionListEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ListVotesCountOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListsCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionListEndResultId");

                            b1.ToTable("ProportionalElectionListEndResult");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionListEndResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("ElectionEndResult");

                    b.Navigation("List");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("Results")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", "Result")
                        .WithMany("ListResults")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionListResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ListVotesCountOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListsCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionListResultId");

                            b1.ToTable("ProportionalElectionListResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionListResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionListResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ListVotesCountOnOtherLists")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ModifiedListsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListBlankRowsCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListVotesCount")
                                .HasColumnType("integer");

                            b1.Property<int>("UnmodifiedListsCount")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionListResultId");

                            b1.ToTable("ProportionalElectionListResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionListResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("Translations")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionList");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionListUnions")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "ProportionalElectionMainList")
                        .WithMany("ProportionalElectionMainListUnions")
                        .HasForeignKey("ProportionalElectionMainListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", "ProportionalElectionRootListUnion")
                        .WithMany("ProportionalElectionSubListUnions")
                        .HasForeignKey("ProportionalElectionRootListUnionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProportionalElection");

                    b.Navigation("ProportionalElectionMainList");

                    b.Navigation("ProportionalElectionRootListUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnionEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionListUnionEntries")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", "ProportionalElectionListUnion")
                        .WithMany("ProportionalElectionListUnionEntries")
                        .HasForeignKey("ProportionalElectionListUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionListUnionEntries_ProportionalElectionL~1");

                    b.Navigation("ProportionalElectionList");

                    b.Navigation("ProportionalElectionListUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", "ProportionalElectionListUnion")
                        .WithMany("Translations")
                        .HasForeignKey("ProportionalElectionListUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionListUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("ProportionalElectionResults")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("Results")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfBlankRowsOnListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfModifiedLists")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfUnmodifiedLists")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionResultId");

                            b1.ToTable("ProportionalElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessNullableCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("ProportionalElectionResultId");

                            b1.ToTable("ProportionalElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfBlankRowsOnListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfListsWithoutParty")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfModifiedLists")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfUnmodifiedLists")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionResultId");

                            b1.ToTable("ProportionalElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultEntryParams", "EntryParams", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AutomaticBallotBundleNumberGeneration")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AutomaticEmptyVoteCounting")
                                .HasColumnType("boolean");

                            b1.Property<int>("BallotBundleSampleSize")
                                .HasColumnType("integer");

                            b1.Property<int>("BallotBundleSize")
                                .HasColumnType("integer");

                            b1.Property<int>("BallotNumberGeneration")
                                .HasColumnType("integer");

                            b1.Property<bool>("CandidateCheckDigit")
                                .HasColumnType("boolean");

                            b1.Property<int>("ReviewProcedure")
                                .HasColumnType("integer");

                            b1.HasKey("ProportionalElectionResultId");

                            b1.ToTable("ProportionalElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("EntryParams")
                        .IsRequired();

                    b.Navigation("ProportionalElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBundle", "Bundle")
                        .WithMany("Ballots")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallotCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallot", "Ballot")
                        .WithMany("BallotCandidates")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", "Candidate")
                        .WithMany("BallotCandidatures")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionResultBallotCandidates_ProportionalEle~1");

                    b.Navigation("Ballot");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBundle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", "ElectionResult")
                        .WithMany("Bundles")
                        .HasForeignKey("ElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("Bundles")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProportionalElectionResultBundleId");

                            b1.ToTable("ProportionalElectionBundles");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultBundleId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "ReviewedBy", b1 =>
                        {
                            b1.Property<Guid>("ProportionalElectionResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProportionalElectionResultBundleId");

                            b1.ToTable("ProportionalElectionBundles");

                            b1.WithOwner()
                                .HasForeignKey("ProportionalElectionResultBundleId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ElectionResult");

                    b.Navigation("List");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("Translations")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("ProportionalElectionUnions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionEndResult", "ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionUnionEntries")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithMany("ProportionalElectionUnionEntries")
                        .HasForeignKey("ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithMany("ProportionalElectionUnionLists")
                        .HasForeignKey("ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionListEntry", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionUnionListEntries")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", "ProportionalElectionUnionList")
                        .WithMany("ProportionalElectionUnionListEntries")
                        .HasForeignKey("ProportionalElectionUnionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionList");

                    b.Navigation("ProportionalElectionUnionList");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionListTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", "ProportionalElectionUnionList")
                        .WithMany("Translations")
                        .HasForeignKey("ProportionalElectionUnionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionUnionList");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnmodifiedListResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionList", "List")
                        .WithMany("UnmodifiedListResults")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", "Result")
                        .WithMany("UnmodifiedListResults")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionUnmodifiedListResults_ProportionalElec~1");

                    b.Navigation("List");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProtocolExport", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany()
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contest");

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfiguration", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("ResultExportConfigurations")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ResultExportConfigurations")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfigurationPoliticalBusiness", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", "PoliticalBusiness")
                        .WithMany("ResultExportConfigurations")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ResultExportConfiguration", "ResultExportConfiguration")
                        .WithMany("PoliticalBusinesses")
                        .HasForeignKey("ResultExportConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalBusiness");

                    b.Navigation("ResultExportConfiguration");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfigurationPoliticalBusinessMetadata", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", "PoliticalBusiness")
                        .WithMany()
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ResultExportConfiguration", "ResultExportConfiguration")
                        .WithMany("PoliticalBusinessMetadata")
                        .HasForeignKey("ResultExportConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalBusiness");

                    b.Navigation("ResultExportConfiguration");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultImport", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("ResultImports")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "StartedBy", b1 =>
                        {
                            b1.Property<Guid>("ResultImportId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ResultImportId");

                            b1.ToTable("ResultImports");

                            b1.WithOwner()
                                .HasForeignKey("ResultImportId");
                        });

                    b.Navigation("Contest");

                    b.Navigation("StartedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultImportCountingCircle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany()
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.ResultImport", "ResultImport")
                        .WithMany("ImportedCountingCircles")
                        .HasForeignKey("ResultImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("ResultImport");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ElectionGroup", "ElectionGroup")
                        .WithMany("SecondaryMajorityElections")
                        .HasForeignKey("ElectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithMany("SecondaryMajorityElections")
                        .HasForeignKey("PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectionGroup");

                    b.Navigation("PrimaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", "CandidateReference")
                        .WithMany("CandidateReferences")
                        .HasForeignKey("CandidateReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("Candidates")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateReference");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", "Candidate")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateEndResult", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionEndResult", "SecondaryMajorityElectionEndResult")
                        .WithMany("CandidateEndResults")
                        .HasForeignKey("SecondaryMajorityElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecondaryMajorityElectionCandidateEndResults_SecondaryMajo~1");

                    b.Navigation("Candidate");

                    b.Navigation("SecondaryMajorityElectionEndResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", "Candidate")
                        .WithMany("CandidateResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", "ElectionResult")
                        .WithMany("CandidateResults")
                        .HasForeignKey("ElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecondaryMajorityElectionCandidateResults_SecondaryMajorit~1");

                    b.Navigation("Candidate");

                    b.Navigation("ElectionResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", "SecondaryMajorityElectionCandidate")
                        .WithMany("Translations")
                        .HasForeignKey("SecondaryMajorityElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecondaryMajorityElectionCandidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", "PrimaryMajorityElectionEndResult")
                        .WithMany("SecondaryMajorityElectionEndResults")
                        .HasForeignKey("PrimaryMajorityElectionEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MajorityElections_PrimaryMajorityElectionEndResultId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionEndResult", "SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecMajElEndResults_SecondaryMajorityElectionId");

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionEndResultCalculation", "Calculation", b1 =>
                        {
                            b1.Property<Guid>("SecondaryMajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("AbsoluteMajority")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("AbsoluteMajorityThreshold")
                                .HasColumnType("numeric");

                            b1.Property<int?>("DecisiveVoteCount")
                                .HasColumnType("integer");

                            b1.HasKey("SecondaryMajorityElectionEndResultId");

                            b1.ToTable("SecondaryMajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("SecondaryMajorityElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("SecondaryMajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("SecondaryMajorityElectionEndResultId");

                            b1.ToTable("SecondaryMajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("SecondaryMajorityElectionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("SecondaryMajorityElectionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("SecondaryMajorityElectionEndResultId");

                            b1.ToTable("SecondaryMajorityElectionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("SecondaryMajorityElectionEndResultId");
                        });

                    b.Navigation("Calculation")
                        .IsRequired();

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("PrimaryMajorityElectionEndResult");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResult", "PrimaryResult")
                        .WithMany("SecondaryMajorityElectionResults")
                        .HasForeignKey("PrimaryResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("Results")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultNullableSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("SecondaryMajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int?>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int?>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int?>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("SecondaryMajorityElectionResultId");

                            b1.ToTable("SecondaryMajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("SecondaryMajorityElectionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("SecondaryMajorityElectionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EmptyVoteCountExclWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("EmptyVoteCountWriteIns")
                                .HasColumnType("integer");

                            b1.Property<int>("IndividualVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("InvalidVoteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCandidateVoteCountExclIndividual")
                                .HasColumnType("integer");

                            b1.HasKey("SecondaryMajorityElectionResultId");

                            b1.ToTable("SecondaryMajorityElectionResults");

                            b1.WithOwner()
                                .HasForeignKey("SecondaryMajorityElectionResultId");
                        });

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("PrimaryResult");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallot", "PrimaryBallot")
                        .WithMany("SecondaryMajorityElectionBallots")
                        .HasForeignKey("PrimaryBallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", "SecondaryMajorityElectionResult")
                        .WithMany("ResultBallots")
                        .HasForeignKey("SecondaryMajorityElectionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryBallot");

                    b.Navigation("SecondaryMajorityElectionResult");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallotCandidate", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallot", "Ballot")
                        .WithMany("BallotCandidates")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", "Candidate")
                        .WithMany("BallotCandidatures")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecondaryMajorityElectionResultBallotCandidates_SecondaryM~1");

                    b.Navigation("Ballot");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("Translations")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", "Result")
                        .WithMany("WriteInBallots")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallotPosition", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallot", "Ballot")
                        .WithMany("WriteInPositions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInMapping", "WriteInMapping")
                        .WithMany("BallotPositions")
                        .HasForeignKey("WriteInMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecondaryMajorityElectionWriteInBallotPositions_SecondaryM~1");

                    b.Navigation("Ballot");

                    b.Navigation("WriteInMapping");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInMapping", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateResult", "CandidateResult")
                        .WithMany("WriteInMappings")
                        .HasForeignKey("CandidateResultId");

                    b.HasOne("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", "Result")
                        .WithMany("WriteInMappings")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecondaryMajorityElectionWriteInMappings_SecondaryMajority~1");

                    b.Navigation("CandidateResult");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimpleCountingCircleResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("SimpleResults")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", "PoliticalBusiness")
                        .WithMany("SimpleResults")
                        .HasForeignKey("PoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.PoliticalBusinessNullableCountOfVoters", "CountOfVoters", b1 =>
                        {
                            b1.Property<Guid>("SimpleCountingCircleResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("ConventionalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int?>("ConventionalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("EVotingReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalBlankBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalInvalidBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalReceivedBallots")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalUnaccountedBallots")
                                .HasColumnType("integer");

                            b1.Property<decimal>("VoterParticipation")
                                .HasColumnType("numeric");

                            b1.HasKey("SimpleCountingCircleResultId");

                            b1.ToTable("SimpleCountingCircleResults");

                            b1.WithOwner()
                                .HasForeignKey("SimpleCountingCircleResultId");
                        });

                    b.Navigation("CountOfVoters")
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("PoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("SimplePoliticalBusinesses")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("SimplePoliticalBusinesses")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimplePoliticalBusinessTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", "SimplePoliticalBusiness")
                        .WithMany("Translations")
                        .HasForeignKey("SimplePoliticalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimplePoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestion", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Ballot", "Ballot")
                        .WithMany("TieBreakQuestions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotEndResult", "BallotEndResult")
                        .WithMany("TieBreakQuestionEndResults")
                        .HasForeignKey("BallotEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.TieBreakQuestion", "Question")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.TieBreakQuestionEndResult", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.TieBreakQuestionResultSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("TieBreakQuestionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerQ1")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerQ2")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.HasKey("TieBreakQuestionEndResultId");

                            b1.ToTable("TieBreakQuestionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("TieBreakQuestionEndResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.TieBreakQuestionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("TieBreakQuestionEndResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerQ1")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerQ2")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.HasKey("TieBreakQuestionEndResultId");

                            b1.ToTable("TieBreakQuestionEndResults");

                            b1.WithOwner()
                                .HasForeignKey("TieBreakQuestionEndResultId");
                        });

                    b.Navigation("BallotEndResult");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotResult", "BallotResult")
                        .WithMany("TieBreakQuestionResults")
                        .HasForeignKey("BallotResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.TieBreakQuestion", "Question")
                        .WithMany("Results")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.TieBreakQuestionResultSubTotal", "EVotingSubTotal", b1 =>
                        {
                            b1.Property<Guid>("TieBreakQuestionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TotalCountOfAnswerQ1")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerQ2")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.HasKey("TieBreakQuestionResultId");

                            b1.ToTable("TieBreakQuestionResults");

                            b1.WithOwner()
                                .HasForeignKey("TieBreakQuestionResultId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.TieBreakQuestionResultNullableSubTotal", "ConventionalSubTotal", b1 =>
                        {
                            b1.Property<Guid>("TieBreakQuestionResultId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("TotalCountOfAnswerQ1")
                                .HasColumnType("integer");

                            b1.Property<int?>("TotalCountOfAnswerQ2")
                                .HasColumnType("integer");

                            b1.Property<int?>("TotalCountOfAnswerUnspecified")
                                .HasColumnType("integer");

                            b1.HasKey("TieBreakQuestionResultId");

                            b1.ToTable("TieBreakQuestionResults");

                            b1.WithOwner()
                                .HasForeignKey("TieBreakQuestionResultId");
                        });

                    b.Navigation("BallotResult");

                    b.Navigation("ConventionalSubTotal")
                        .IsRequired();

                    b.Navigation("EVotingSubTotal")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestionTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.TieBreakQuestion", "TieBreakQuestion")
                        .WithMany("Translations")
                        .HasForeignKey("TieBreakQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TieBreakQuestion");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Vote", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Contest", "Contest")
                        .WithMany("Votes")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Votes")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Vote", "Vote")
                        .WithOne("EndResult")
                        .HasForeignKey("Voting.Ausmittlung.Data.Models.VoteEndResult", "VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResultCountOfVotersInformationSubTotal", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteEndResult", null)
                        .WithMany("CountOfVotersInformationSubTotals")
                        .HasForeignKey("VoteEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResultVotingCardDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteEndResult", null)
                        .WithMany("VotingCards")
                        .HasForeignKey("VoteEndResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResult", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("VoteResults")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.Vote", "Vote")
                        .WithMany("Results")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.VoteResultEntryParams", "EntryParams", b1 =>
                        {
                            b1.Property<Guid>("VoteResultId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AutomaticBallotBundleNumberGeneration")
                                .HasColumnType("boolean");

                            b1.Property<int>("BallotBundleSampleSizePercent")
                                .HasColumnType("integer");

                            b1.Property<int>("ReviewProcedure")
                                .HasColumnType("integer");

                            b1.HasKey("VoteResultId");

                            b1.ToTable("VoteResults");

                            b1.WithOwner()
                                .HasForeignKey("VoteResultId");
                        });

                    b.Navigation("CountingCircle");

                    b.Navigation("EntryParams");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallot", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteResultBundle", "Bundle")
                        .WithMany("Ballots")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallotQuestionAnswer", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteResultBallot", "Ballot")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotQuestion", "Question")
                        .WithMany("BallotAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallotTieBreakQuestionAnswer", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.VoteResultBallot", "Ballot")
                        .WithMany("TieBreakQuestionAnswers")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Ausmittlung.Data.Models.TieBreakQuestion", "Question")
                        .WithMany("BallotAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBundle", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.BallotResult", "BallotResult")
                        .WithMany("Bundles")
                        .HasForeignKey("BallotResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("VoteResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VoteResultBundleId");

                            b1.ToTable("VoteResultBundles");

                            b1.WithOwner()
                                .HasForeignKey("VoteResultBundleId");
                        });

                    b.OwnsOne("Voting.Ausmittlung.Data.Models.User", "ReviewedBy", b1 =>
                        {
                            b1.Property<Guid>("VoteResultBundleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SecureConnectId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VoteResultBundleId");

                            b1.ToTable("VoteResultBundles");

                            b1.WithOwner()
                                .HasForeignKey("VoteResultBundleId");
                        });

                    b.Navigation("BallotResult");

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteTranslation", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.Vote", "Vote")
                        .WithMany("Translations")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VotingCardResultDetail", b =>
                {
                    b.HasOne("Voting.Ausmittlung.Data.Models.ContestCountingCircleDetails", "ContestCountingCircleDetails")
                        .WithMany("VotingCards")
                        .HasForeignKey("ContestCountingCircleDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestCountingCircleDetails");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Ballot", b =>
                {
                    b.Navigation("BallotQuestions");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("TieBreakQuestions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotEndResult", b =>
                {
                    b.Navigation("QuestionEndResults");

                    b.Navigation("TieBreakQuestionEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotQuestion", b =>
                {
                    b.Navigation("BallotAnswers");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.BallotResult", b =>
                {
                    b.Navigation("Bundles");

                    b.Navigation("QuestionResults");

                    b.Navigation("TieBreakQuestionResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CantonSettings", b =>
                {
                    b.Navigation("CountingCircleResultStateDescriptions");

                    b.Navigation("EnabledVotingCardChannels");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Contest", b =>
                {
                    b.Navigation("CantonDefaults")
                        .IsRequired();

                    b.Navigation("CountingCircleDetails");

                    b.Navigation("Details");

                    b.Navigation("DomainOfInfluenceDetails");

                    b.Navigation("DomainOfInfluenceParties");

                    b.Navigation("MajorityElectionUnions");

                    b.Navigation("MajorityElections");

                    b.Navigation("PreviousContestOwners");

                    b.Navigation("ProportionalElectionUnions");

                    b.Navigation("ProportionalElections");

                    b.Navigation("ResultExportConfigurations");

                    b.Navigation("ResultImports");

                    b.Navigation("SimplePoliticalBusinesses");

                    b.Navigation("Translations");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestCountingCircleDetails", b =>
                {
                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDetails", b =>
                {
                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ContestDomainOfInfluenceDetails", b =>
                {
                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.CountingCircle", b =>
                {
                    b.Navigation("ContactPersonAfterEvent");

                    b.Navigation("ContactPersonDuringEvent")
                        .IsRequired();

                    b.Navigation("ContestDetails");

                    b.Navigation("ContestElectorates");

                    b.Navigation("DomainOfInfluences");

                    b.Navigation("Electorates");

                    b.Navigation("MajorityElectionResults");

                    b.Navigation("ProportionalElectionResults");

                    b.Navigation("ResponsibleAuthority")
                        .IsRequired();

                    b.Navigation("SimpleResults");

                    b.Navigation("VoteResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluence", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Contests");

                    b.Navigation("CountingCircles");

                    b.Navigation("Details");

                    b.Navigation("ExportConfigurations");

                    b.Navigation("MajorityElections");

                    b.Navigation("Parties");

                    b.Navigation("PlausibilisationConfiguration");

                    b.Navigation("ProportionalElections");

                    b.Navigation("ResultExportConfigurations");

                    b.Navigation("SimplePoliticalBusinesses");

                    b.Navigation("SubAuthorityDomainOfInfluences");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.Navigation("ProportionalElectionCandidates");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResult", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultColumn", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.DoubleProportionalResultRow", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ElectionGroup", b =>
                {
                    b.Navigation("SecondaryMajorityElections");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffCalculationRound", b =>
                {
                    b.Navigation("GroupValues");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.HagenbachBischoffGroup", b =>
                {
                    b.Navigation("CalculationRoundValues");

                    b.Navigation("CalculationRounds");

                    b.Navigation("CalculationWinnerRounds");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElection", b =>
                {
                    b.Navigation("BallotGroupEntries");

                    b.Navigation("BallotGroups");

                    b.Navigation("ElectionGroup");

                    b.Navigation("EndResult");

                    b.Navigation("MajorityElectionCandidates");

                    b.Navigation("MajorityElectionUnionEntries");

                    b.Navigation("Results");

                    b.Navigation("SecondaryMajorityElections");

                    b.Navigation("SecondaryMajorityElectionsOnSeparateBallots");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.Navigation("BallotGroupResults");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.Navigation("BallotCandidatures");

                    b.Navigation("BallotGroupEntries");

                    b.Navigation("CandidateReferences");

                    b.Navigation("CandidateReferencesOfSecondaryElectionsOnSeparateBallot");

                    b.Navigation("CandidateResults");

                    b.Navigation("EndResult");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionEndResult", b =>
                {
                    b.Navigation("CandidateEndResults");

                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("SecondaryMajorityElectionEndResults");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResult", b =>
                {
                    b.Navigation("BallotGroupResults");

                    b.Navigation("Bundles");

                    b.Navigation("CandidateResults");

                    b.Navigation("SecondaryMajorityElectionResults");

                    b.Navigation("WriteInBallots");

                    b.Navigation("WriteInMappings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBallot", b =>
                {
                    b.Navigation("BallotCandidates");

                    b.Navigation("SecondaryMajorityElectionBallots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionResultBundle", b =>
                {
                    b.Navigation("Ballots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionUnion", b =>
                {
                    b.Navigation("MajorityElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInBallot", b =>
                {
                    b.Navigation("WriteInPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.MajorityElectionWriteInMapping", b =>
                {
                    b.Navigation("BallotPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.Navigation("ComparisonCountOfVotersConfigurations");

                    b.Navigation("ComparisonVoterParticipationConfigurations");

                    b.Navigation("ComparisonVotingChannelConfigurations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElection", b =>
                {
                    b.Navigation("DoubleProportionalResult");

                    b.Navigation("DoubleProportionalResultRows");

                    b.Navigation("EndResult");

                    b.Navigation("ProportionalElectionListUnions");

                    b.Navigation("ProportionalElectionLists");

                    b.Navigation("ProportionalElectionUnionEntries");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidate", b =>
                {
                    b.Navigation("BallotCandidatures");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateEndResult", b =>
                {
                    b.Navigation("VoteSources");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionCandidateResult", b =>
                {
                    b.Navigation("VoteSources");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResult", b =>
                {
                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("HagenbachBischoffRootGroup");

                    b.Navigation("ListEndResults");

                    b.Navigation("ListLotDecisions");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionEndResultListLotDecision", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionList", b =>
                {
                    b.Navigation("Bundles");

                    b.Navigation("CandidateEndResultVoteSources");

                    b.Navigation("CandidateResultVoteSources");

                    b.Navigation("DoubleProportionalResultCells");

                    b.Navigation("DoubleProportionalResultColumn");

                    b.Navigation("EndResult");

                    b.Navigation("HagenbachBischoffGroup");

                    b.Navigation("ListLotDecisionEntries");

                    b.Navigation("ProportionalElectionCandidates");

                    b.Navigation("ProportionalElectionListUnionEntries");

                    b.Navigation("ProportionalElectionMainListUnions");

                    b.Navigation("ProportionalElectionUnionListEntries");

                    b.Navigation("Results");

                    b.Navigation("Translations");

                    b.Navigation("UnmodifiedListResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListEndResult", b =>
                {
                    b.Navigation("CandidateEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListResult", b =>
                {
                    b.Navigation("CandidateResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.Navigation("HagenbachBischoffGroup");

                    b.Navigation("ListLotDecisionEntries");

                    b.Navigation("ProportionalElectionListUnionEntries");

                    b.Navigation("ProportionalElectionSubListUnions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResult", b =>
                {
                    b.Navigation("Bundles");

                    b.Navigation("ListResults");

                    b.Navigation("UnmodifiedListResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBallot", b =>
                {
                    b.Navigation("BallotCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionResultBundle", b =>
                {
                    b.Navigation("Ballots");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.Navigation("DoubleProportionalResult");

                    b.Navigation("EndResult");

                    b.Navigation("ProportionalElectionUnionEntries");

                    b.Navigation("ProportionalElectionUnionLists");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.Navigation("DoubleProportionalResultColumn");

                    b.Navigation("ProportionalElectionUnionListEntries");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultExportConfiguration", b =>
                {
                    b.Navigation("PoliticalBusinessMetadata");

                    b.Navigation("PoliticalBusinesses");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.ResultImport", b =>
                {
                    b.Navigation("IgnoredCountingCircles");

                    b.Navigation("ImportedCountingCircles");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.Navigation("BallotGroupEntries");

                    b.Navigation("Candidates");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.Navigation("BallotCandidatures");

                    b.Navigation("BallotGroupEntries");

                    b.Navigation("CandidateResults");

                    b.Navigation("EndResult");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionCandidateResult", b =>
                {
                    b.Navigation("WriteInMappings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionEndResult", b =>
                {
                    b.Navigation("CandidateEndResults");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResult", b =>
                {
                    b.Navigation("CandidateResults");

                    b.Navigation("ResultBallots");

                    b.Navigation("WriteInBallots");

                    b.Navigation("WriteInMappings");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionResultBallot", b =>
                {
                    b.Navigation("BallotCandidates");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInBallot", b =>
                {
                    b.Navigation("WriteInPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SecondaryMajorityElectionWriteInMapping", b =>
                {
                    b.Navigation("BallotPositions");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimpleCountingCircleResult", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.SimplePoliticalBusiness", b =>
                {
                    b.Navigation("ResultExportConfigurations");

                    b.Navigation("SimpleResults");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.TieBreakQuestion", b =>
                {
                    b.Navigation("BallotAnswers");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.Vote", b =>
                {
                    b.Navigation("Ballots");

                    b.Navigation("EndResult");

                    b.Navigation("Results");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteEndResult", b =>
                {
                    b.Navigation("BallotEndResults");

                    b.Navigation("CountOfVotersInformationSubTotals");

                    b.Navigation("VotingCards");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResult", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBallot", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("TieBreakQuestionAnswers");
                });

            modelBuilder.Entity("Voting.Ausmittlung.Data.Models.VoteResultBundle", b =>
                {
                    b.Navigation("Ballots");
                });
#pragma warning restore 612, 618
        }
    }
}
